#这个项目的这个文件定义成bootstrap.properties是有讲究的：
#当你配置的配置中心的 server.port 不是 8888 的时候，其他服务就起不来了，从日志中可以发现，服务启动的时候，
# Fetching config from server at: http://localhost:8888，说明其他服务还是去 8888 这个默认端口取配置中心的文件，
# 而不去你在 application.yaml 文件中配置的配置中心读取配置文件，这是什么原因呢？
#其实这就是一个配置文件的优先级的问题，当服务启动的时候，它需要加载一些配置才能启动成功，
# 而当你把配置信息放至配置中心的时候，启动服务首先就要去配置中心获取配置信息，然后加载这些信息才能成功启动。
#当你的服务配置文件使用 application.yaml 文件时，服务启动还没到加载 application.yaml 文件那一步，
# 所以并不会去你配置的注册中心里的配置中心读取所需要的配置信息，因为application.yaml 的优先级不高，而此时又需要一些配置信息（例如数据库的信息），
# 系统才能继续往下执行启动，这个时候就需要使用 bootstrap.yaml 引导配置文件，
# 使用这个配置文件时，服务在启动的时候就会先加载 bootstrap.yaml 配置文件，这样就会去你配置的注册中心里的配置中心读取配置文件信息，然后加载信息进行启动。

server.port=8773
spring.application.name=config-client

#要获取的文件对应的应用名
spring.cloud.config.name=config-client
#要获取的文件对应的环境
spring.cloud.config.profile=dev
#在把自己注册到服务中心后，去掉下面这个配置服务（config-server）的地址
#spring.cloud.config.uri= http://localhost:8770/
#增加如下两行 通过服务名去获取配置信息，而不是上面的ip（spring.cloud.config.uri），这时如果配置服务（config-server）部署多份，通过负载均衡，从而实现高可用
#从配置中心读取文件
spring.cloud.config.discovery.enabled=true
#配置中心的servieId，即服务名。
spring.cloud.config.discovery.serviceId=config-server
#服务注册中心
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/


#rabbitMQ
spring.rabbitmq.host=47.99.36.32
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=saopigying2018
#启用消息总线
spring.cloud.bus.enabled=true
spring.cloud.bus.trace.enabled=true
#git文件修改后，通过http://localhost:8773/actuator/bus-refresh
#去刷新所有config-client的服务（其他如eureka-client配置成config-client的话，也会刷新）的配置（localhost:8773是其中任意一个节点），重新获取最新的配置，不需要重启服务
#如果是传统的做法，需要重启服务，才能达到配置文件的更新。
#/actuator/bus-refresh接口可以指定服务，即使用"destination"参数，比如 “/actuator/bus-refresh?destination=customers:**” 即刷新服务名为customers的所有服务。
management.endpoints.web.exposure.include=bus-refresh
